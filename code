import React, { useState } from "react";
import { Address6 } from "ip-address";

function calculateSubnet(ip, cidr) {
  if (ip.includes(":")) {
    try {
      const address = new Address6(`${ip}/${cidr}`);
      const subnetMask = address.subnetMask;
      const networkAddress = address.startAddress().correctForm();
      const broadcastAddress = address.endAddress().correctForm();
      const numberOfHosts = Math.pow(2, 128 - cidr);

      return {
        subnetMask,
        networkAddress,
        broadcastAddress,
        firstHost: networkAddress,
        lastHost: broadcastAddress,
        numberOfHosts,
      };
    } catch {
      return null;
    }
  } else {
    const [a, b, c, d] = ip.split(".").map(Number);
    if ([a, b, c, d].some((octet) => isNaN(octet) || octet < 0 || octet > 255)) {
      return null;
    }

    const ipInt = (a << 24) | (b << 16) | (c << 8) | d;
    const mask = -1 << (32 - cidr);
    const subnetMask = [(mask >>> 24) & 255, (mask >>> 16) & 255, (mask >>> 8) & 255, mask & 255].join(".");

    const network = ipInt & mask;
    const broadcast = network | ~mask;
    const firstHost = cidr === 32 ? network : network + 1;
    const lastHost = cidr === 32 ? network : broadcast - 1;
    const numHosts = cidr === 32 ? 1 : Math.max(0, broadcast - network - 1);

    const toIp = (int) => [
      (int >>> 24) & 255,
      (int >>> 16) & 255,
      (int >>> 8) & 255,
      int & 255
    ].join(".");

    return {
      subnetMask,
      networkAddress: toIp(network),
      broadcastAddress: toIp(broadcast),
      firstHost: toIp(firstHost),
      lastHost: toIp(lastHost),
      numberOfHosts: numHosts,
    };
  }
}

export default function SubnetCalculator() {
  const [ip, setIp] = useState("");
  const [cidr, setCidr] = useState("24");
  const [result, setResult] = useState(null);
  const [error, setError] = useState("");

  const handleCalculate = () => {
    const parsedCidr = parseInt(cidr);
    const calculation = calculateSubnet(ip, parsedCidr);
    if (!calculation) {
      setError("Invalid IP address or CIDR");
      setResult(null);
    } else {
      setError("");
      setResult(calculation);
    }
  };

  const isIPv6 = ip.includes(":");
  const cidrOptions = Array.from({ length: isIPv6 ? 129 : 33 }, (_, i) => i);

  return (
    <div className="max-w-md mx-auto p-4 bg-white shadow-xl rounded-2xl">
      <h1 className="text-2xl font-bold mb-4">IP Subnet Calculator</h1>
      <div className="mb-4">
        <label className="block mb-1">IP Address</label>
        <input
          type="text"
          value={ip}
          onChange={(e) => setIp(e.target.value)}
          className="w-full border rounded p-2"
          placeholder="e.g., 192.168.1.1 or 2001:0db8::"
        />
      </div>
      <div className="mb-4">
        <label className="block mb-1">CIDR Notation</label>
        <select
          value={cidr}
          onChange={(e) => setCidr(e.target.value)}
          className="w-full border rounded p-2"
        >
          {cidrOptions.map((i) => (
            <option key={i} value={i}>{`/${i}`}</option>
          ))}
        </select>
      </div>
      <button
        onClick={handleCalculate}
        className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700"
      >
        Calculate
      </button>

      {error && (
        <div className="mt-4 text-red-600 font-medium">{error}</div>
      )}

      {result && (
        <div className="mt-6">
          <h2 className="text-xl font-semibold mb-2">Results</h2>
          <ul className="space-y-1">
            <li><strong>Subnet Mask:</strong> {result.subnetMask}</li>
            <li><strong>Network Address:</strong> {result.networkAddress}</li>
            <li><strong>Broadcast Address:</strong> {result.broadcastAddress}</li>
            <li><strong>First Host:</strong> {result.firstHost}</li>
            <li><strong>Last Host:</strong> {result.lastHost}</li>
            <li><strong>Number of Hosts:</strong> {result.numberOfHosts.toString()}</li>
          </ul>
        </div>
      )}
    </div>
  );
}
